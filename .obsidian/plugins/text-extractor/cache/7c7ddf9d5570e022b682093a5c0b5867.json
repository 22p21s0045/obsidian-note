{"path":"Lecture Kmutt/INT203/material/Chapter6-BasicComponents.pdf","text":"Chapter 6 – Basic Components Asst.Prof. Dr. Umaporn Supasitthimethee ผศ.ดร.อุมาพร สุภสิทธิเมธี https://vuejs.org/guide/essentials/component-basics.html 2Asst.Prof.Dr. Umaporn Supasitthimethee Components Basics • Components allow us to split the UI into independent and reusable pieces and think about each piece in isolation. • It's common for an app to be organized into a tree of nested components: • This is very similar to how we nest native HTML elements, but Vue implements its own component model that allow us to encapsulate custom content and logic in each component. 3Asst.Prof.Dr. Umaporn Supasitthimethee Using a Component • To use a child component, we need to import it in the parent component. • Assuming we placed our counter component inside a file called ButtonCounter.vue, the component will be exposed as the file's default export: <script setup> import ButtonCounter from './ButtonCounter.vue' </script> <template> <h1>Here is a child component!</h1> <ButtonCounter /> </template> • With <script setup>, imported components are automatically made available to the template. 4Asst.Prof.Dr. Umaporn Supasitthimethee Using a Component • Components can be reused as many times as you want: • In SFCs, it's recommended to use PascalCase tag names for child components to differentiate from native HTML elements. <h1>Here are many child components!</h1> <ButtonCounter /> <ButtonCounter /> <ButtonCounter /> 5Asst.Prof.Dr. Umaporn Supasitthimethee Style Guide: Component Name Casing • Using PascalCase names when registering components. • PascalCase names are valid JavaScript identifiers. This makes it easier to import and register components in JavaScript. It also helps IDEs with auto-completion. • <PascalCase /> makes it more obvious that this is a Vue component instead of a native HTML element in templates. It also differentiates Vue components from custom elements (web components). • Vue supports resolving kebab-case tags to components registered using PascalCase. This means a component registered as MyComponent can be referenced in the template via both <MyComponent> and <my-component>. https://vuejs.org/guide/components/registration.html#component-name-casing 6Asst.Prof.Dr. Umaporn Supasitthimethee Style Guide: Component • Base components that apply app-specific styling and conventions should all begin with a specific prefix, such as Base, App, or V. 7Asst.Prof.Dr. Umaporn Supasitthimethee Component Registration https://vuejs.org/guide/components/registration.html#component-registration 8Asst.Prof.Dr. Umaporn Supasitthimethee Component Registration • A Vue component needs to be \"registered\" so that Vue knows where to locate its implementation when it is encountered in a template. • There are two ways to register components: global and local. 9Asst.Prof.Dr. Umaporn Supasitthimethee Global Registration • We can make components available globally in the current Vue application using the app.component() method: import { createApp } from 'vue' import App from './App.vue' import MyComponent from './MyComponent.vue' const app = createApp(App) app.component( // the registered name (tag name), imported component implementation 'MyComp', MyComponent ) app.mount('#app') //main.js <template> <MyComp msg=\"This is my world!\"></MyComp> </template> //app.vue 10Asst.Prof.Dr. Umaporn Supasitthimethee Global Registration • the app.component() method can be chained: • Globally registered components can be used in the template of any component within this application: // the app.component() method can be chained: app .component('ComponentA', ComponentA) .component('ComponentB', ComponentB) .component('ComponentC', ComponentC) <!-- this will work in any component inside the app --> <ComponentA/> <ComponentB/> <ComponentC/> 11Asst.Prof.Dr. Umaporn Supasitthimethee Global Registration Drawbacks • While convenient, global registration has a few drawbacks: • Global registration prevents build systems from removing unused components (a.k.a \"tree-shaking\"). If you globally register a component but end up not using it anywhere in your app, it will still be included in the final bundle. • Global registration makes dependency relationships less explicit in large applications. It makes it difficult to locate a child component's implementation from a parent component using it. This can affect long-term maintainability similar to using too many global variables. 12Asst.Prof.Dr. Umaporn Supasitthimethee Local Registration • Local registration scopes the availability of the registered components to the current component only. • It makes the dependency relationship more explicit and is more tree- shaking friendly. 13Asst.Prof.Dr. Umaporn Supasitthimethee Local Registration <script setup> import ComponentA from './components/ComponentA.vue' </script> <template> <ComponentA /> </template> <style></style> Note that locally registered components are not also available in descendent components. In this case, ComponentA will be made available to the current component only, not any of its child or descendent components. 14Asst.Prof.Dr. Umaporn Supasitthimethee slots 15Asst.Prof.Dr. Umaporn Supasitthimethee Slot Content and Outlet • In some cases, we may want to pass a template fragment markup to a child component and let the child component render the fragment within its own template. • The <slot> element is a slot outlet that indicates where the parent- provided slot content should be rendered. https://vuejs.org/guide/components/slots.html 16Asst.Prof.Dr. Umaporn Supasitthimethee Slots <template> <div> <slot> </slot> </div> </template> //BaseCard.vue <template> <BaseCard> <header> <h3> {{ fullName }} </h3> </header> </BaseCard> </template> //UserInfo.vue Slot allow us to receive dynamic HTML code content from outside components <template> <BaseCard> <h2>User Info</h2> <ul> <li></li> <li></li> </ul> </BaseCard> </template> //Contact.vue Parent template Slot outlet Slot content Slot content 17Asst.Prof.Dr. Umaporn Supasitthimethee Named Slots If you use more than slot, you can use named slot. A <slot> outlet without name implicitly has the name \"default\". 18Asst.Prof.Dr. Umaporn Supasitthimethee Named Slots vs Default Slot <template> <div> <header> <slot name=\"header\"> </slot> </header> <slot> </slot> </div> </template> <template> <BaseCard> <template v-slot:header> <h3>{{ fullName }}</h3> </template> <template v-slot:default> <p>{{ userInfo }} </p> <!--remaining for another slot --> </template> </BaseCard> </template> <template #header>…</template> <template #default>…</template> //# is a shorthand of v-slot Parent template 19Asst.Prof.Dr. Umaporn Supasitthimethee Name Slots and Default Slots <BaseLayout> templateParent template Result 20Asst.Prof.Dr. Umaporn Supasitthimethee Not Provide Content for header, “The Default Header” will receive and show here Default Fallback Content <template> <div> <header> <slot name=\"header\"> <h2>The Default Header</h2> </slot> </header> <slot> </slot> </div> </template> <template> <BaseCard> < <template v-slot:default> <p>{{ userInfo }} </p> </template> </BaseCard> </template> There are cases when it's useful to specify fallback (i.e. default) content for a slot, to be rendered only when no content is provided. Parent template 21Asst.Prof.Dr. Umaporn Supasitthimethee Passing Props 22Asst.Prof.Dr. Umaporn Supasitthimethee Props • Configuration Props: change how component behaves, for examples, disabled, compact view, outline button, number of columns • Data Props: data using in component, for examples, items, products, url, source 23Asst.Prof.Dr. Umaporn Supasitthimethee Style Guide: props • We declare long prop names using camelCase because this avoids having to use quotes when using them as property keys, and allows us to reference them directly in template expressions because they are valid JavaScript identifiers: • props definitions should be as detailed as possible. https://vuejs.org/guide/components/props.html#prop-passing-details • Technically, you can also use camelCase when passing props to a child component. However, the convention is using kebab-case in all cases to align with HTML attributes: defineProps({ greetingMessage: String }) <span>{{ greetingMessage }}</span> <MyComponent greeting-message=\"hello\" /> 24Asst.Prof.Dr. Umaporn Supasitthimethee Props Declaration Syntax const props = defineProps({ errorMsg: String, randNumbers: Array }) 2. Object syntax const props = defineProps({ errorMsg: { type: String, require: true }, randNumbers: { type: Array, require: true } }) 3. Object syntax with Prop validation const props = defineProps(['errorMsg', 'randNumbers']) 1. Array of string 25Asst.Prof.Dr. Umaporn Supasitthimethee Prop Declaration • Vue components require explicit props declaration so that Vue knows what external props passed to the component should be treated as fall through attributes <script setup> const props = defineProps({ userName: { type: String, require: true } }) </script> <script setup> import { ref } from 'vue' const user= ref('Umaporn') </script> <template> <user-data :userName=\"user\">Passing Data</user-data> </template> //App.vue //UserData.vue 26Asst.Prof.Dr. Umaporn Supasitthimethee Static vs. Dynamic Props props passed as static values, like in: You've also seen props assigned dynamically with v-bind or its : shortcut, such as in: https://vuejs.org/guide/components/props.html#static-vs-dynamic-props <BlogPost title=\"My journey with Vue\" /> <!-- Dynamically assign the value of a variable --> <BlogPost :title=\"post.title\" /> <!-- Dynamically assign the value of a complex expression --> <BlogPost :title=\"post.title + ' by ' + post.author.name\" /> 27Asst.Prof.Dr. Umaporn Supasitthimethee Passing Different Value Types https://vuejs.org/guide/components/props.html#passing-different-value-types Number Boolean <!-- Even though `42` is static, we need v-bind to tell Vue that --> <!-- this is a JavaScript expression rather than a string. --> <BlogPost :likes=\"42\" /> <!-- Dynamically assign to the value of a variable. --> <BlogPost :likes=\"post.likes\" /> <!-- Including the prop with no value will imply `true`. --> <BlogPost is-published /> <!-- Even though `false` is static, we need v-bind to tell Vue that --> <!-- this is a JavaScript expression rather than a string. --> <BlogPost :is-published=\"false\" /> <!-- Dynamically assign to the value of a variable. --> <BlogPost :is-published=\"post.isPublished\" /> 28Asst.Prof.Dr. Umaporn Supasitthimethee Passing Different Value Types Array Object <!-- Even though the array is static, we need v-bind to tell Vue that --> <!-- this is a JavaScript expression rather than a string. --> <BlogPost :comment-ids=\"[234, 266, 273]\" /> <!-- Dynamically assign to the value of a variable. --> <BlogPost :comment-ids=\"post.commentIds\" /> <!-- Even though the object is static, we need v-bind to tell Vue that --> <!-- this is a JavaScript expression rather than a string. --> <BlogPost :author=\"{ name: 'Veronica', company: 'Veridian Dynamics' }\" /> <!-- Dynamically assign to the value of a variable. --> <BlogPost :author=\"post.author\" /> 29Asst.Prof.Dr. Umaporn Supasitthimethee defineProps({ // Basic type check // (`null` and `undefined` values will allow any type) propA: Number, // Multiple possible types propB: [String, Number], // Required string propC: { type: String, required: true }, // Number with a default value propD: { type: Number, default: 100 }) Prop validation https://vuejs.org/guide/components/props.html#prop-validation To specify prop validations, you can provide an object with validation requirements to the defineProps(), instead of an array of strings. All props are optional by default, unless required: true is specified. 30Asst.Prof.Dr. Umaporn Supasitthimethee One-Way Data Flow • All props form a one-way-down binding between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. • This prevents child components from accidentally mutating the parent's state, which can make your app's data flow harder to understand. • In addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. • This means you should not attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console: https://vuejs.org/guide/components/props.html#one-way-data-flow const props = defineProps(['foo']) // warning, props are readonly! props.foo = 'bar' 31Asst.Prof.Dr. Umaporn Supasitthimethee One-Way Data Flow 1. The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards. In this case, it's best to define a local data property that uses the prop as its initial value 2. The prop is passed in as a raw value that needs to be transformed. In this case, it's best to define a computed property using the prop's value: const displayErrorText = ref(props.errorMsg.trim().toUpperCase()) const props = defineProps({ errorMsg: { type: String, require: true } }) const displayErrorText = computed(() => props.errorMsg.trim().toUpperCase()) 32Asst.Prof.Dr. Umaporn Supasitthimethee Listening to Events 33Asst.Prof.Dr. Umaporn Supasitthimethee Component Events: Declaring Emitted Events https://vuejs.org/guide/components/events.html#declaring-emitted-events <script setup> defineEmits(['chooseMail', 'submit']) </script> • A component can explicitly declare the events it will emit using the defineEmits() macro: 34Asst.Prof.Dr. Umaporn Supasitthimethee Component Events: Declaring Emitted Events • A component can emit custom events directly in template expressions (e.g. in a v-on handler) using the built-in $emit method: • All extra arguments passed to $emit() after the event name will be forwarded to the listener. • For example, with $emit('foo', 1, 2, 3) the listener function will receive three arguments. https://vuejs.org/guide/components/events.html#event-arguments <input type=\"checkbox\" :value=\"mail.id\" @click=\"$emit('chooseMail', mail.id, 'unread')\" /> 35Asst.Prof.Dr. Umaporn Supasitthimethee Component Events: Declaring Emitted Events • The $emit method that we used in the <template> isn't accessible within the <script setup> section of a component, but defineEmits() returns an equivalent function that we can use instead: https://vuejs.org/guide/components/events.html#event-arguments <script setup> const emits = defineEmits(['submit']) function buttonClick() { emits('submit') } </script> 36Asst.Prof.Dr. Umaporn Supasitthimethee Component Events: Event Arguments • You can pass into a method using the special $event variable https://vuejs.org/guide/components/events.html#event-arguments <input type=\"text\" @change=\"$emit('changeMe', $event.target.value)\" /> 37Asst.Prof.Dr. Umaporn Supasitthimethee <script setup> import { ref } from 'vue' import HelloWorld from './components/HelloWorld.vue' console.clear() const msg = 'hello, component' const newMsg = ref('') const showUpdateMsg = ( updateMsg ) => { newMsg.value = updateMsg } </script> <template> <p>Original Message: {{ msg }}</p> <p>Updated Message:{{ newMsg }}</p> <HelloWorld :msg=\"msg\" @update=\"showUpdateMsg\" /> </template> <script setup> import { ref} from 'vue' const emits = defineEmits(['update']) const props = defineProps({ msg: { type: String, require: true } }) </script> <template> <div> <button @click=\"$emit( 'update' , msg.toUpperCase() )\"> Update Message</button> </div> </template> //App.vue //HelloWorld.vue Component Events Example 38Asst.Prof.Dr. Umaporn Supasitthimethee Component Events Example <script setup> import { ref } from 'vue' import SimpleEmit from './components/SimpleEmit.vue' const printMessage = (msg, target, num) => { console.log(msg) console.log(target) console.log(num) } </script> <template> <simple-emit @changeMe=\"printMessage\" /> </template> //App.vue <script setup> const emit = defineEmits(['changeMe']) </script> <template> <input type=\"text\" @change=\"$emit( 'changeMe' , $event.target.value, $event.target, 999 )\" /> </template> //SimpleEmit.vue 39Asst.Prof.Dr. Umaporn Supasitthimethee Component Events Example: wrapping child parameters into Object and add up with parent parameters <script setup> import { ref } from 'vue' import SimpleEmit from './components/SimpleEmit.vue' const printMessage = ( e , status ) => { console.log(e.targetEValue) console.log(e.targetE) console.log(e.num) console.log(status) } </script> <template> <simple-emit @changeMe=\"printMessage($event, \"Done\" /> </template> <script setup> const emit = defineEmits(['changeMe']) </script> <template> <input type=\"text\" @change=\"$emit('changeMe', {targetEValue: $event.target.value, targetE:$event.target, num: 999} )\" /> </template> //App.vue //SimpleEmit.vue 40Asst.Prof.Dr. Umaporn Supasitthimethee Teleport 41Asst.Prof.Dr. Umaporn Supasitthimethee Teleporting: built-in Vue component • <Teleport> is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component. • <Teleport> provides a clean way to break out of the nested DOM structure. • The to target of <Teleport> expects a CSS selector string or an actual DOM node. • For examples, https://vuejs.org/guide/built-ins/teleport.html#teleport <Teleport to=\"#modals\"> <div>A</div> </Teleport> <Teleport to=\"CSSSelector(ID/Class)/TagName\">…</Teleport> <Teleport to=\"body\"> <div>B</div> </Teleport> 42Asst.Prof.Dr. Umaporn Supasitthimethee Teleporting <div class=\"outer\"> <h3>Vue Teleport Example</h3> <div> <MyModal /> </div> </div> <script setup> import { ref } from 'vue' const open = ref(false) </script> <template> <button @click=\"open = true\">Open Modal</button> <Teleport to=\"body\"> <div v-if=\"open\" class=\"modal\"> <p>Hello from the modal!</p> <button @click=\"open = false\">Close</button> </div> </Teleport> </template>","libVersion":"0.3.1","langs":""}