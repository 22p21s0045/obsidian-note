{"path":"Lecture Kmutt/INT203/material/Chapter5-Lifecycle.pdf","text":"Chapter 5 – Vue3 Lifecycle Hooks Asst.Prof. Dr. Umaporn Supasitthimethee ผศ.ดร.อุมาพร สุภสิทธิเมธี https://vuejs.org/guide/essentials/lifecycle.html#lifecycle-hooks 2Asst.Prof.Dr. Umaporn Supasitthimethee Lifecycle Hooks • Each component instance goes through a series of initialization steps when it's created • For example, • it needs to set up data observation • compile the template • mount the instance to the DOM • update the DOM when data changes • Along the way, it also runs pre-defined functions called lifecycle hooks, giving users the opportunity to add their own code at specific stages. 3Asst.Prof.Dr. Umaporn Supasitthimethee Creating a Vue Application • The createApp function takes a root component (App.vue) as an argument and returns a Vue app instance. • The Vue app instance returned by the createApp is also called an application context object. • An application instance won't render anything until its .mount()method is called. https://vuejs.org/guide/essentials/application.html#creating-a-vue-application import { createApp } from 'vue' const app = createApp({ /* root component options */ }) 4Asst.Prof.Dr. Umaporn Supasitthimethee Lifecycle Hooks Diagram Because setup is run around the beforeCreate and created lifecycle hooks, you do not need to explicitly define them. These functions accept a callback that will be executed when the hook is called by the component https://vuejs.org/guide/essentials/lifecycle.html#lifecycle-diagram 5Asst.Prof.Dr. Umaporn Supasitthimethee Composition API on Created Hooks 1. beforeCreate() 2. created() setup() beforeCreate and created are not needed when using the composition API 1. beforeCreate: called immediately after a new Vue instance is initialized, before computed properties, watchers, events, data, etc., are not set up. 2. created: called after the instance has been created. Since instance is created we can set up data observation, computed properties, methods, watch/event callbacks. But we can not do DOM operation since the component is not mounted. 6Asst.Prof.Dr. Umaporn Supasitthimethee 3. onBeforeMount: after template compiled, dynamic placeholders and interpolations are removed and replaced with the values. The template and the styles are all compiled here, but the DOM cannot be manipulated yet. 4. onMounted: called when component is mounted, show the HTML elements with defined content by Vue app on the screen 5. onBeforeUpdate: called when reactive data has changed, before the DOM is re- rendered. 6. onUpdated: called when reactive data has changed, and the DOM has been re- rendered. Mounted does not reached again in updated because template is not unmounted. 7. onBeforeUnmount(): called right before a component instance is unmounted. At this stage the instance is still fully functional. 8. onUnmounted(): called after a component instance has been unmounted. When this hook is called, all directives of the component instance have been unbound, all event listeners have been removed, and all child component instances have also been unmounted. https://www.vuemastery.com/courses/vue-3-essentials/lifecycle-hooks/ 7Asst.Prof.Dr. Umaporn Supasitthimethee Lifecycle Hooks Functions function onMounted(callback: () => void): void function onUpdated(callback: () => void): void function onUnmounted(callback: () => void): void function onBeforeMount(callback: () => void): void function onBeforeUpdate(callback: () => void): void function onBeforeUnmount(callback: () => void): void","libVersion":"0.3.1","langs":""}