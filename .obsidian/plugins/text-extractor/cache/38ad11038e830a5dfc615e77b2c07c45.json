{"path":"Lecture Kmutt/INT209/2023-INT209-04 Run DB Container v0.9.1.pdf","text":"INT 2 0 9 D ev O p s LA B - 04 R un D B C o n t a in e r Ol a r n R o j a n a po r n pu n Th u rs d ay , 2 May 2 0 2 4 IN T 2 0 9 De v Op s O u t lin e ❍ R u n D B c o n t ai n e r w i t h m y s q l / m y s q l - se r v e r ❍ I n t e g r at e DB c o n t ai n e r wi t h AP I c o n t ai n e r ❍ B u i l d D B i m ag e ❍ Us e Doc k e r Vo l um e wi t h DB c o n t ai n e r ❍ Co n n e c t i n g c o n t ai n e r s to us e r - de f i n e d n e t w o rk 2 IN T 2 0 9 De v Op s DB A r c h it ec t u r e https:// github.com / olarnr /int210 - studentproj.git 3 Br o ws er/api/students Fir e w a ll lvm [ xxy y y ]. s i t . k m ut t . a c . t h db s c rip t . s q l : 3306 exec u t e Ba c k - en d Jav a w e b ap p l i c at i o n s e rv e r .j ar :8 0 8 0 /ta r g e t bu ild ru n st o r e da t a dir IN T 2 0 9 De v Op s mysql/mysql - server 4 mkdir 209lab4 && cd 209lab4 git clone https://github.com/olarnr/int210-studentproj.git studentproj cd studentproj/studentdb # run a mysql-server container, passing user/password/database environment variables, # bind mount scripts during initialization. # note the script will run every file in docker-entrypoint-initdb.d in alphabetical order docker run --name dbserver -d \\ --env MYSQL_USER=dev --env MYSQL_PASSWORD=x_eRT2vv4 --env MYSQL_DATABASE=school \\ --mount type=bind,src=./scripts/,target=/docker-entrypoint-initdb.d/ \\ mysql/mysql-server # the root user password is generated and can be viewed in logs docker logs -f dbserver # the user password is stored in the container! docker exec dbserver printenv # check that school database has base records docker exec -i dbserver mysql -u dev --password=x_eRT2vv4 < selectstudent.sql ht t p s : / / hu b . d oc k e r . c om /r / mys q l / mys q l - se r v e r IN T 2 0 9 De v Op s mysql/mysql - server 5 # may use variables exported in current shell cat db-env.sh export MYSQL_USER=dev export MYSQL_PASSWORD=x_eRT2vv4 export MYSQL_DATABASE=school source db-env.sh # remove previous dbserver container docker rm -f dbserver docker run --name dbserver -d \\ --env MYSQL_USER --env MYSQL_PASSWORD --env MYSQL_DATABASE \\ --mount type=bind,src=./scripts/,target=/docker-entrypoint-initdb.d/ \\ mysql/mysql-server # make sure that the env are set in the container docker exec dbserver printenv # check that school database has base records docker exec -i dbserver mysql -u dev --password=$MYSQL_PASSWORD < selectstudent.sql IN T 2 0 9 De v Op s mysql/mysql - server 6 # may store variables in a file cat env.list MYSQL_USER=dev MYSQL_PASSWORD=x_eRT2vv4 MYSQL_DATABASE=school # remove previous dbserver container docker rm -f dbserver docker run --name dbserver -d \\ --env-file env.list \\ --mount type=bind,src=./scripts/,target=/docker-entrypoint-initdb.d/ \\ mysql/mysql-server # check that the env are set in the container docker exec dbserver printenv # check that school database has base records # note that we use MYSQL_PASSWORD that was exported previously docker exec -i dbserver mysql -u dev --password=$MYSQL_PASSWORD < selectstudent.sql IN T 2 0 9 De v Op s I n t eg r a t e w it h A P I 7 cd ~/209lab4/studentproj/studentapi # set mysql_url variable to dbserver container’s IP address # note that mysql_url variable is configured in application.properties export mysql_url=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' dbserver) # test that we can access dbserver from $mysql_url telnet $mysql_url 3306 # build jar package ./mvnw clean package cat Dockerfile FROM openjdk:17-jdk-alpine COPY target/*.jar /api.jar ENTRYPOINT [\"java\",\"-jar\",\"/api.jar\"] # build studentapi image docker build -t studentproj/studentapi . # note that mysql_url must be passed to container docker run --name studentapi -d --env mysql_url -p 8080:8080 studentproj/studentapi curl localhost:8080/api/students IN T 2 0 9 De v Op s B u ild dbserver Im a ge 8 cd ~/209lab4/studentproj/studentdb cat Dockerfile FROM mysql/mysql-server ENV MYSQL_RANDOM_ROOT_PASSWORD=true ENV MYSQL_USER=dev ENV MYSQL_PASSWORD=x_eRT2vv4 ENV MYSQL_DATABASE=school COPY scripts/ /docker-entrypoint-initdb.d/ # build the image docker build -t studentproj/studentdb . # remove previous dbserver container docker rm -f dbserver docker run --name dbserver -d studentproj/studentdb # test that we can still access dbserver from $mysql_url telnet $mysql_url 3306 # if the IP address is changed, need to set the new IP address and restart API container export mysql_url=$(docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' dbserver) docker restart studentapi curl localhost:8080/api/students IN T 2 0 9 De v Op s D o c k er V o lu m es ❍ V o lu m es a r e t h e p r ef er r ed m ec h a n is m f o r p er s is t in g d a t a g en er a t ed b y a n d u s ed b y D o c k er c o n t a in er s ❍ W h ile b in d m o u n t s a r e d ep en d en t o n t h e d ir ec t o r y s t r u c t u r e a n d O S o f t h e h o s t m a c h in e, v o lu m es a r e c o m p let ely m a n a g ed b y D o c k er . ❍ V o lu m es h a v e s ev er a l a d v a n t a g es o v er b in d m o u n t s : ❍ Vol um e s a r e e a s i e r t o b a ck up or m i g r a t e t h a n b i n d m oun t s ❍ Yo u ca n m a n a g e v o l um e s us i n g D o ck e r C L I co m m a n d s o r t h e D o ck e r API ❍ Vol um e s w or k on b ot h L i n ux a n d Wi n d ow s con t a i n e r s ❍ Vol um e s ca n b e m or e s a f e l y s h a r e d a m on g m ul t i p l e con t a i n e r s ❍ Vol um e d r i ve r s l e t y ou s t or e vol um e s on r e m ot e h os t s or cl oud p r ovi d e r s , e n cr y p t t h e con t e n t s of vo l u m e s , o r a d d o t h e r f u n c t i o n a l i t y ❍ Ne w v o l u m e s c a n h a v e t h e i r c o n t e n t p r e - po pu l a t e d by a c o n t a i n e r ❍ Vol um e s on D ock e r D e s k t op h a ve m uch h i g h e r p e r f or m a n ce t h a n b i n d m oun t s f r om M a c a n d Wi n d ow s h os t s . 9 ht t p s : / / do c s . do c k e r. c o m /s to r a g e /v o lu m e s / IN T 2 0 9 De v Op s D o c k er V o lu m es 10 ht t p s : / / do c s . do c k e r. c o m /s to r a g e /v o lu m e s /# c r e a te - an d - ma n a g e - vo lu me s IN T 2 0 9 De v Op s D o c k er V o lu m es 11 ht t p s : / / do c s . do c k e r. c o m /s to r a g e /v o lu m e s / # create a volume docker volume create my-vol # list volumes docker volume ls # Inspect a volume docker volume inspect my-vol [ { \"Driver\": \"local\", \"Labels\": {}, \"Mountpoint\": \"/var/lib/docker/volumes/my-vol/_data\", \"Name\": \"my-vol\", \"Options\": {}, \"Scope\": \"local\" } ] # remove a volume docker volume rm my-vol IN T 2 0 9 De v Op s M o u n t in g a v o lu m e 12 ht t p s : / / do c s . do c k e r. c o m /s to r a g e /v o lu m e s / cd studentproj/studentdb # remove previous dbserver container docker rm -f dbserver # if a volume does not exist, Docker creates an empty volume docker run --name dbserver -d \\ --mount src=studentdb-vol,target=/var/lib/mysql studentproj/studentdb # inspect dbserver to verify that Docker created the volume and it mounted correctly. # Look for the Mounts section: docker inspect dbserver \"Mounts\": [ { \"Type\": \"volume\", \"Name\": \"studentdb-vol\", \"Source\": \"/var/lib/docker/volumes/studentdb-vol/_data\", \"Destination\": \"/var/lib/mysql\", \"Driver\": \"local\", \"Mode\": \"z\", \"RW\": true, \"Propagation\": \"\" } ], IN T 2 0 9 De v Op s M o u n t in g a v o lu m e 13 # remove previous dbserver container docker rm -f dbserver # if a volume does exist, Docker uses the existing volume docker run --name dbserver -d \\ --mount src=studentdb-vol,target=/var/lib/mysql studentproj/studentdb # quickly check that school database has base records docker exec -i dbserver mysql -u dev --password=x_eRT2vv4 < selectstudent.sql # if the database exists, mysql does not initialize the database! # need to remove the volume manually, if you want to initialize the database again # note that the container is ready much faster (1.12s vs 19.63s) docker logs -f dbserver IN T 2 0 9 De v Op s Do ck er N et w o rk ❍ Ne w ly - st a r t e d c o n t a in e r s c o n n e c t t o t h e de f a u lt b r idg e n e t wo r k (a ls o c a lled br id g e ) u n les s o t h erw is e s p ec if ied ❍ Co ntaine r s o n the d e f au lt b r id g e ne tw o r k c an on ly ac c e s s e ac h ot h er b y IP a d d r e s s e s ❍ On a u s er - de f in e d b r idg e n e t wo r k , c o n t a in e r s ca n r e s o lv e ea c h ot h er b y name or alias 14 ht t p s : / / do c s . do c k e r. c o m /n e tw o r k /b r id g e / IN T 2 0 9 De v Op s student - net Ne tw or k 15 # view online help docker network --help # create studentproj-net network docker network create studentproj-net # view list of networks docker network ls # view studentproj-net details (containers in studentproj-net) docker network inspect studentproj-net # add dbserver to studentproj-net docker network connect studentproj-net dbserver # confirm that dbserver is in ‘bridge’ and ‘studentproj-net’ docker network inspect studentproj-net docker inspect dbserver IN T 2 0 9 De v Op s Do ck er N et w o rk 16 # remove dbserver from ‘bridge’ network docker network connect studentproj-net dbserver # remove previous studentapi, unset mysql_url, # and make sure that dbserver is not specify in /etc/hosts docker rm -f studentapi unset mysql_url nslookup dbserver cd ~/209lab4/studentproj/studentapi # run api container inside studentproj-net docker run -d --name studentapi --network studentproj-net \\ -p 8080:8080 studentproj/studentapi # test the api curl localhost:8080/api/students","libVersion":"0.3.1","langs":""}